{
    "Id": "5e41412b-0839-4fa8-b7a1-9360115ef303",
    "Name": "MariaDB - Create User If Not Exists",
    "Description": "Creates a new user account on a MariaDB database server",
    "ActionType": "Octopus.Script",
    "Version": 4,
    "Author": "twerthi",
    "Packages": [],
    "Properties": {
        "Octopus.Action.Script.ScriptSource": "Inline",
        "Octopus.Action.Script.Syntax": "PowerShell",
        "Octopus.Action.Script.ScriptBody": "# Define functions\nfunction Get-ModuleInstalled\n{\n    # Define parameters\n    param(\n        $PowerShellModuleName\n    )\n\n    # Check to see if the module is installed\n    if ($null -ne (Get-Module -ListAvailable -Name $PowerShellModuleName))\n    {\n        # It is installed\n        return $true\n    }\n    else\n    {\n        # Module not installed\n        return $false\n    }\n}\n\nfunction Install-PowerShellModule\n{\n    # Define parameters\n    param(\n        $PowerShellModuleName,\n        $LocalModulesPath\n    )\n\n\t# Check to see if the package provider has been installed\n    if ((Get-NugetPackageProviderNotInstalled) -ne $false)\n    {\n    \t# Display that we need the nuget package provider\n        Write-Host \"Nuget package provider not found, installing ...\"\n        \n        # Install Nuget package provider\n        Install-PackageProvider -Name Nuget -Force\n    }\n\n\t# Save the module in the temporary location\n    Save-Module -Name $PowerShellModuleName -Path $LocalModulesPath -Force\n}\n\nfunction Get-NugetPackageProviderNotInstalled\n{\n\t# See if the nuget package provider has been installed\n    return ($null -eq (Get-PackageProvider -ListAvailable -Name Nuget -ErrorAction SilentlyContinue))\n}\n\nfunction Get-UserExists\n{\n\t# Define parameters\n    param ($Hostname,\n    $Username)\n    \n\t# Execute query\n    return Invoke-SqlQuery \"SELECT * FROM mysql.user WHERE Host = '$Hostname' AND User = '$Username';\"\n}\n\n# Define PowerShell Modules path\n$LocalModules = (New-Item \"$PSScriptRoot\\Modules\" -ItemType Directory -Force).FullName\n$env:PSModulePath = \"$LocalModules$([System.IO.Path]::PathSeparator)$env:PSModulePath\"\n$PowerShellModuleName = \"SimplySql\"\n\n# Set secure protocols\n[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls11 -bor [System.Net.SecurityProtocolType]::Tls12\n\n# Check to see if SimplySql module is installed\nif ((Get-ModuleInstalled -PowerShellModuleName $PowerShellModuleName) -ne $true)\n{\n    # Tell user what we're doing\n    Write-Output \"PowerShell module $PowerShellModuleName is not installed, downloading temporary copy ...\"\n\n    # Install temporary copy\n    Install-PowerShellModule -PowerShellModuleName $PowerShellModuleName -LocalModulesPath $LocalModules\n}\n\n# Display\nWrite-Output \"Importing module $PowerShellModuleName ...\"\n\n# Check to see if it was downloaded\nif ((Test-Path -Path \"$LocalModules\\$PowerShellModuleName\") -eq $true)\n{\n\t# Use specific location\n    $PowerShellModuleName = \"$LocalModules\\$PowerShellModuleName\"\n}\n\n# Declare initial connection string\n$connectionString = \"Server=$createMariaDBServerName;Port=$createPort;\"\n\n# Update the connection string based on authentication method\nswitch ($mariaDbAuthenticationMethod) {\n    \"awsiam\" {\n        # Region is part of the RDS endpoint, extract\n        $region = ($createMariaDBServerName.Split(\".\"))[2]\n\n        Write-Host \"Generating AWS IAM token ...\"\n        $createUserPassword = (aws rds generate-db-auth-token --hostname $createMariaDBServerName --region $region --port $createPort --username $createUsername)\n        \n        # Append remaining portion of connection string\n        $connectionString += \";Uid=$createUsername;Pwd=`\"$createUserPassword`\";\"\n\n        break\n    }\n    \"usernamepassword\" {\n        # Append remaining portion of connection string\n        $connectionString += \";Uid=$createUsername;Pwd=`\"$createUserPassword`\";\"\n        \n        break    \n    }\n}\n\n# Import the module\nImport-Module -Name $PowerShellModuleName\n\ntry\n{\n    # Connect to MySQL\n    Open-MySqlConnection -ConnectionString $connectionString\n\n    # See if database exists\n    $userExists = Get-UserExists -Hostname $createUserHostname -Username $createNewUsername\n\n    if ($userExists -eq $null)\n    {\n        # Create database\n        Write-Output \"Creating user $createNewUsername ...\"\n        $executionResults = Invoke-SqlUpdate \"CREATE USER '$createNewUsername'@'$createUserHostname' IDENTIFIED BY '$createNewUserPassword';\"\n\n        # See if it was created\n        $userExists = Get-UserExists -Hostname $createUserHostname -Username $createNewUsername\n            \n        # Check array\n        if ($userExists -ne $null)\n        {\n            # Success\n            Write-Output \"$createNewUsername created successfully!\"\n        }\n        else\n        {\n            # Failed\n            Write-Error \"$createNewUsername was not created!\"\n        }\n    }\n    else\n    {\n    \t# Display message\n        Write-Output \"User $createNewUsername on $createUserHostname already exists.\"\n    }\n}\nfinally\n{\n    Close-SqlConnection\n}\n\n\n"
    },
    "Parameters": [
    {
        "Id": "b16e1e59-5640-4eef-8286-0d1909c63392",
        "Name": "createMariaDBServerName",
        "Label": "MariaDB Server",
        "HelpText": "Host name of the MariaDB server",
        "DefaultValue": "",
        "DisplaySettings": {
            "Octopus.ControlType": "SingleLineText"
        }
    },
    {
        "Id": "709f17ad-4f8b-44b5-ab16-5187d6eb9919",
        "Name": "createMariaDBServerPort",
        "Label": "Port",
        "HelpText": "Port number the MySQL server listens on.",
        "DefaultValue": "3306",
        "DisplaySettings": {
            "Octopus.ControlType": "SingleLineText"
        }
    },
    {
        "Id": "195d1c5b-9fa4-40fc-ba9c-a342b454fb73",
        "Name": "createLoginWithAddUserRights",
        "Label": "Login name",
        "HelpText": "Login name of a user with rights to create user accounts.",
        "DefaultValue": "",
        "DisplaySettings": {
            "Octopus.ControlType": "SingleLineText"
        }
    },
    {
        "Id": "1e44b15a-74cc-4254-8b79-edcf522ba3a4",
        "Name": "createLoginPasswordWithAddUserRights",
        "Label": "Login Password",
        "HelpText": "Password Login name.",
        "DefaultValue": "",
        "DisplaySettings": {
            "Octopus.ControlType": "Sensitive"
        }
    },
    {
        "Id": "c7373a86-ee11-4e4d-826a-4fc1009d7d64",
        "Name": "createNewUsername",
        "Label": "New user name",
        "HelpText": "Name of the new user account to create.",
        "DefaultValue": "",
        "DisplaySettings": {
            "Octopus.ControlType": "SingleLineText"
        }
    },
    {
        "Id": "adf3f09d-2a40-4d4a-8029-283bb26e0cfc",
        "Name": "createNewUserPassword",
        "Label": "New user password",
        "HelpText": "Password for the new user account.",
        "DefaultValue": "",
        "DisplaySettings": {
            "Octopus.ControlType": "Sensitive"
        }
    },
    {
        "Id": "bb5bd4a3-2520-4c7f-9824-b72fe46c4ca6",
        "Name": "createUserHostname",
        "Label": "New user host name",
        "HelpText": "Host name that the new user account is allowed to login from.  Enter % to allow the account to connect from anywhere.",
        "DefaultValue": "",
        "DisplaySettings": {
            "Octopus.ControlType": "SingleLineText"
        }
    },
    {
        "Id": "37569f0a-6cc7-4914-be50-0cc24484dcd9",
        "Name": "mariaDbAuthenticationMethod",
        "Label": "Authentication Method",
        "HelpText": "Method used to authenticate to the MariaDB server.",
        "DefaultValue": "usernamepassword",
        "DisplaySettings": {
            "Octopus.ControlType": "Select",
            "Octopus.SelectOptions": "awsiam|AWS EC2 IAM Role\nusernamepassword|Username\\Password"
        }
    }
    ],
    "LastModifiedBy": "coryreid",
    "StepPackageId": "Octopus.Script",
    "$Meta": {
        "ExportedAt": "2022-07-12T19:41:41.956Z",
        "OctopusVersion": "2022.3.2617-hotfix.4278",
        "Type": "ActionTemplate"
    },
    "Category": "mariadb"
  }
