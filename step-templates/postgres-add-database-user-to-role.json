{
    "Id": "72f8bfaf-14c3-4807-b687-c07738c14ba1",
    "Name": "Postgres - Add Database User To Role",
    "Description": "Adds database user to a role",
    "ActionType": "Octopus.Script",
    "Version": 3,
    "Author": "twerthi",
    "Packages": [],
    "Properties": {
      "Octopus.Action.Script.ScriptSource": "Inline",
      "Octopus.Action.Script.Syntax": "PowerShell",
      "Octopus.Action.Script.ScriptBody": "# Define functions\nfunction Get-ModuleInstalled\n{\n    # Define parameters\n    param(\n        $PowerShellModuleName\n    )\n\n    # Check to see if the module is installed\n    if ($null -ne (Get-Module -ListAvailable -Name $PowerShellModuleName))\n    {\n        # It is installed\n        return $true\n    }\n    else\n    {\n        # Module not installed\n        return $false\n    }\n}\n\nfunction Install-PowerShellModule\n{\n    # Define parameters\n    param(\n        $PowerShellModuleName,\n        $LocalModulesPath\n    )\n\n\t# Check to see if the package provider has been installed\n    if ((Get-NugetPackageProviderNotInstalled) -ne $false)\n    {\n    \t# Display that we need the nuget package provider\n        Write-Host \"Nuget package provider not found, installing ...\"\n        \n        # Install Nuget package provider\n        Install-PackageProvider -Name Nuget -Force\n    }\n\n\t# Save the module in the temporary location\n    Save-Module -Name $PowerShellModuleName -Path $LocalModulesPath -Force\n}\n\nfunction Get-NugetPackageProviderNotInstalled\n{\n\t# See if the nuget package provider has been installed\n    return ($null -eq (Get-PackageProvider -ListAvailable -Name Nuget -ErrorAction SilentlyContinue))\n}\n\nfunction Get-UserInRole\n{\n\t# Define parameters\n    param (\n    $Username,\n    $RoleName)\n    \n\t# Execute query\n    $userRole = Invoke-SqlQuery \"SELECT r.rolname, r1.rolname as `\"role`\" FROM pg_catalog.pg_roles r JOIN pg_catalog.pg_auth_members m ON (m.member = r.oid) JOIN pg_roles r1 ON (m.roleid=r1.oid) WHERE r.rolcanlogin AND r1.rolname = '$RoleName' AND r.rolname = '$Username'\"\n\n    # Check to see if anything was returned\n    if ($userRole.ItemArray.Count -gt 0)\n    {\n        # Found\n        return $true\n    }\n    \n\n    # Not found\n    return $false\n}\n\n# Define PowerShell Modules path\n$LocalModules = (New-Item \"$PSScriptRoot\\Modules\" -ItemType Directory -Force).FullName\n$env:PSModulePath = \"$LocalModules$([System.IO.Path]::PathSeparator)$env:PSModulePath\"\n$PowerShellModuleName = \"SimplySql\"\n\n# Set secure protocols\n[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls11 -bor [System.Net.SecurityProtocolType]::Tls12\n\n# Check to see if SimplySql module is installed\nif ((Get-ModuleInstalled -PowerShellModuleName $PowerShellModuleName) -ne $true)\n{\n    # Tell user what we're doing\n    Write-Output \"PowerShell module $PowerShellModuleName is not installed, downloading temporary copy ...\"\n\n    # Install temporary copy\n    Install-PowerShellModule -PowerShellModuleName $PowerShellModuleName -LocalModulesPath $LocalModules\n}\n\n# Display\nWrite-Output \"Importing module $PowerShellModuleName ...\"\n\n# Check to see if it was downloaded\nif ((Test-Path -Path \"$LocalModules\\$PowerShellModuleName\") -eq $true)\n{\n\t# Use specific location\n    $PowerShellModuleName = \"$LocalModules\\$PowerShellModuleName\"\n}\n\n# Import the module\nImport-Module -Name $PowerShellModuleName\n\n# Create credential object for the connection\n$SecurePassword = ConvertTo-SecureString $addLoginPasswordWithAddRoleRights -AsPlainText -Force\n$ServerCredential = New-Object System.Management.Automation.PSCredential ($addLoginWithAddRoleRights, $SecurePassword)\n\n# Get whether trust certificate is necessary\n$addTrustSSL = [System.Convert]::ToBoolean(\"$addTrustSSL\")\n\ntry\n{\n\t# Check to see if we need to trust the ssl cert\n\tif ($addTrustSSL -eq $true)\n\t{\n\t\tOpen-PostGreConnection -Server $addPostgresServerName -Credential $ServerCredential -Port $addPostgresServerPort -TrustSSL\n\t}\n\telse\n\t{\n    \t# Connect to MySQL\n    \tOpen-PostGreConnection -Server $addPostgresServerName -Credential $ServerCredential -Port $addPostgresServerPort\n\t}\n\n    # See if database exists\n    $userInRole = Get-UserInRole -Username $addUsername -RoleName $addRoleName\n\n    if ($userInRole -eq $false)\n    {\n        # Create database\n        Write-Output \"Adding user $addUsername to role $addRoleName ...\"\n        $executionResults = Invoke-SqlUpdate \"GRANT $addRoleName TO $addUsername;\"\n\n        # See if it was created\n        $userInRole = Get-UserInRole -Username $addUsername -RoleName $addRoleName\n            \n        # Check array\n        if ($userInRole -eq $true)\n        {\n            # Success\n            Write-Output \"$addUserName added to $addRoleName successfully!\"\n        }\n        else\n        {\n            # Failed\n            Write-Error \"Failure adding $addUserName to $addRoleName!\"\n        }\n    }\n    else\n    {\n    \t# Display message\n        Write-Output \"User $addUsername is already in role $addRoleName\"\n    }\n}\nfinally\n{\n    Close-SqlConnection\n}\n\n\n"
    },
    "Parameters": [
      {
        "Id": "802920ef-155f-4d43-aba7-0c32b09e90e8",
        "Name": "addPostgresServerName",
        "Label": "Server name",
        "HelpText": "Name of the PostreSQL server.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "89dcd174-d798-49be-8a09-d8a528cb6847",
        "Name": "addPostgresServerPort",
        "Label": "Port",
        "HelpText": "Port that the PostgreSQL server listens on.",
        "DefaultValue": "5432",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "9a975cd9-3891-4150-b747-bb78a76fcfb8",
        "Name": "addLoginWithAddRoleRights",
        "Label": "Login name",
        "HelpText": "Login name of a user that can add roles to other users.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "76b5d5a6-4953-4dc4-92c9-3487b7852a2f",
        "Name": "addLoginPasswordWithAddRoleRights",
        "Label": "Login password",
        "HelpText": "Password for the login account.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "Sensitive"
        }
      },
      {
        "Id": "cf31a6ae-244f-49bb-b60b-e80987b96cdf",
        "Name": "addUsername",
        "Label": "User name",
        "HelpText": "Name of the user to add the role to.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "631a3a6c-203c-4925-9ee9-d2086debde37",
        "Name": "addRoleName",
        "Label": "Role name",
        "HelpText": "Name of the role to add to the user.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "c2fa3736-8d0c-4de6-9d11-72d0910c9cb7",
        "Name": "addTrustSSL",
        "Label": "Trust SSL certificate",
        "HelpText": "Force trusting the SSL certificate.",
        "DefaultValue": "False",
        "DisplaySettings": {
          "Octopus.ControlType": "Checkbox"
        }
      }
    ],
    "LastModifiedBy": "twerthi",
    "$Meta": {
      "ExportedAt": "2020-05-15T23:16:36.704Z",
      "OctopusVersion": "2020.1.17",
      "Type": "ActionTemplate"
    },
    "Category": "postgresql"
  }