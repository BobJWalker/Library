{
    "Id": "fc7272be-779c-4ef2-8051-0e7271471328",
    "Name": "MySQL - Add Database User To Role",
    "Description": "Adds a database user to a role",
    "ActionType": "Octopus.Script",
    "Version": 5,
    "Author": "twerthi",
    "Packages": [],
    "Properties": {
      "Octopus.Action.Script.ScriptSource": "Inline",
      "Octopus.Action.Script.Syntax": "PowerShell",
      "Octopus.Action.Script.ScriptBody": "# Define functions\nfunction Get-ModuleInstalled\n{\n    # Define parameters\n    param(\n        $PowerShellModuleName\n    )\n\n    # Check to see if the module is installed\n    if ($null -ne (Get-Module -ListAvailable -Name $PowerShellModuleName))\n    {\n        # It is installed\n        return $true\n    }\n    else\n    {\n        # Module not installed\n        return $false\n    }\n}\n\nfunction Install-PowerShellModule\n{\n    # Define parameters\n    param(\n        $PowerShellModuleName,\n        $LocalModulesPath\n    )\n\n\t# Check to see if the package provider has been installed\n    if ((Get-NugetPackageProviderNotInstalled) -ne $false)\n    {\n    \t# Display that we need the nuget package provider\n        Write-Host \"Nuget package provider not found, installing ...\"\n        \n        # Install Nuget package provider\n        Install-PackageProvider -Name Nuget -Force\n    }\n\n\t# Save the module in the temporary location\n    Save-Module -Name $PowerShellModuleName -Path $LocalModulesPath -Force\n}\n\nfunction Get-NugetPackageProviderNotInstalled\n{\n\t# See if the nuget package provider has been installed\n    return ($null -eq (Get-PackageProvider -ListAvailable -Name Nuget -ErrorAction SilentlyContinue))\n}\n\nfunction Get-UserInRole\n{\n\t# Define parameters\n    param ($UserHostname,\n    $Username,\n    $RoleHostName,\n    $RoleName)\n    \n\t# Execute query\n    $grants = Invoke-SqlQuery \"SHOW GRANTS FOR '$Username'@'$UserHostName';\"\n\n    # Loop through Grants\n    foreach ($grant in $grants.ItemArray)\n    {\n        # Check grant\n        if ($grant -eq \"GRANT ``$RoleName``@``$RoleHostName`` TO ``$Username``@``$UserHostName``\")\n        {\n            # They're in the group\n            return $true\n        }\n    }\n\n    # Not found\n    return $false\n}\n\n# Define PowerShell Modules path\n$LocalModules = (New-Item \"$PSScriptRoot\\Modules\" -ItemType Directory -Force).FullName\n$env:PSModulePath = \"$LocalModules$([System.IO.Path]::PathSeparator)$env:PSModulePath\"\n$PowerShellModuleName = \"SimplySql\"\n\n# Set secure protocols\n[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls11 -bor [System.Net.SecurityProtocolType]::Tls12\n\n# Check to see if SimplySql module is installed\nif ((Get-ModuleInstalled -PowerShellModuleName $PowerShellModuleName) -ne $true)\n{\n    # Tell user what we're doing\n    Write-Output \"PowerShell module $PowerShellModuleName is not installed, downloading temporary copy ...\"\n\n    # Install temporary copy\n    Install-PowerShellModule -PowerShellModuleName $PowerShellModuleName -LocalModulesPath $LocalModules\n}\n\n# Display\nWrite-Output \"Importing module $PowerShellModuleName ...\"\n\n# Check to see if it was downloaded\nif ((Test-Path -Path \"$LocalModules\\$PowerShellModuleName\") -eq $true)\n{\n\t# Import from specific location\n    $PowerShellModuleName = \"$LocalModules\\$PowerShellModuleName\"\n}\n\n# Import the module\nImport-Module -Name $PowerShellModuleName\n\n# Create credential object for the connection\n$SecurePassword = ConvertTo-SecureString $addLoginPasswordWithAddRoleRights -AsPlainText -Force\n$ServerCredential = New-Object System.Management.Automation.PSCredential ($addLoginWithAddRoleRights, $SecurePassword)\n\ntry\n{\n\t# Connect to MySQL\n    $connectionString = \"Server=$addMySQLServerName;Port=$addMySQLServerPort;Uid=$addLoginWithAddRoleRights;Pwd=$addLoginPasswordWithAddRoleRights;\"\n    if ($createUseSSL -eq \"True\")\n    {\n    \t# Append to connection string\n        $connectionString += \"SslMode=Required;\"\n    }\n    else\n    {\n    \t# Disable SSL\n        $connectionString += \"SslMode=none;\"\n    }\n    \n    Open-MySqlConnection -ConnectionString $connectionString\n    \n\n    # See if database exists\n    $userInRole = Get-UserInRole -UserHostname $addUserHostname -Username $addUsername -RoleHostName $addRoleHostName -RoleName $addRoleName\n\n    if ($userInRole -eq $false)\n    {\n        # Create database\n        Write-Output \"Adding user $addUsername@$addUserHostName to role $addRoleName@$addRoleHostName ...\"\n        $executionResults = Invoke-SqlUpdate \"GRANT '$addRoleName'@'$addRoleHostName' TO '$addUsername'@'$addUserHostName';\"\n\n        # See if it was created\n        $userInRole = Get-UserInRole -UserHostname $addUserHostname -Username $addUsername -RoleHostName $addRoleHostName -RoleName $addRoleName\n            \n        # Check array\n        if ($userInRole -eq $true)\n        {\n            # Success\n            Write-Output \"$addUserName@$addUserHostName added to $addRoleName@$addRoleHostName successfully!\"\n        }\n        else\n        {\n            # Failed\n            Write-Error \"Failure adding $addUserName@$addUserHostName to $addRoleName@$addRoleHostName!\"\n        }\n    }\n    else\n    {\n    \t# Display message\n        Write-Output \"User $addUsername@$addUserHostName is already in role $addRoleName@$addRoleHostName\"\n    }\n}\nfinally\n{\n    Close-SqlConnection\n}\n\n\n"
    },
    "Parameters": [
      {
        "Id": "e9c2debc-6a3f-4473-878d-bfd49c48daaa",
        "Name": "addMySQLServerName",
        "Label": "MySQL Server name",
        "HelpText": "Name of the MySQL database server",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "ba516241-5b65-4cd7-b807-47000b6c0cc7",
        "Name": "addMySQLServerPort",
        "Label": "Port",
        "HelpText": "Port the MySQL listens on.",
        "DefaultValue": "3306",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "98d1dfe0-92a7-4fef-a254-4f088ec16f46",
        "Name": "addLoginWithAddRoleRights",
        "Label": "Login name",
        "HelpText": "Login name of a user that can add roles to other users.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "7dca0c96-03e3-41eb-87dd-82d5671fdcb5",
        "Name": "addLoginPasswordWithAddRoleRights",
        "Label": "Login password",
        "HelpText": "Password for the login account.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "Sensitive"
        }
      },
      {
        "Id": "a4e562bc-9af9-4bb4-813e-47946942dea3",
        "Name": "addUsername",
        "Label": "User name",
        "HelpText": "Name of the user to add the role to.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "5d24ccf6-9e79-448b-8bc5-60b573ea0586",
        "Name": "addUserHostname",
        "Label": "User Hostname",
        "HelpText": "Hostname for the user account.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "fc3a04c1-8ed5-45dc-9672-a5eccf9d4233",
        "Name": "addRoleName",
        "Label": "Role name",
        "HelpText": "Name of the role to add to the user.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "6fec023e-45e5-4327-b94e-357cfab5b57e",
        "Name": "addRoleHostName",
        "Label": "Role hostname",
        "HelpText": "Hostname of the role.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "f5426b81-bbd0-42ec-ab22-2b36655672bb",
        "Name": "addUseSSL",
        "Label": "Use SSL",
        "HelpText": "Check this box to force the use of SSL.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "Checkbox"
        }
      }
    ],
    "LastModifiedBy": "twerthi",
    "$Meta": {
      "ExportedAt": "2020-05-25T21:23:08.369Z",
      "OctopusVersion": "2020.1.18",
      "Type": "ActionTemplate"
    },
    "Category": "mysql"
  }