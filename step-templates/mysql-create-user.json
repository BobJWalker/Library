{
    "Id": "d5e87b36-da2b-4771-9394-0dbdc9587dd4",
    "Name": "MySQL - Create User If Not Exists",
    "Description": "Creates a new user account on a MySQL database server",
    "ActionType": "Octopus.Script",
    "Version": 5,
    "Author": "twerthi",
    "Packages": [],
    "Properties": {
      "Octopus.Action.Script.ScriptSource": "Inline",
      "Octopus.Action.Script.Syntax": "PowerShell",
      "Octopus.Action.Script.ScriptBody": "# Define functions\nfunction Get-ModuleInstalled\n{\n    # Define parameters\n    param(\n        $PowerShellModuleName\n    )\n\n    # Check to see if the module is installed\n    if ($null -ne (Get-Module -ListAvailable -Name $PowerShellModuleName))\n    {\n        # It is installed\n        return $true\n    }\n    else\n    {\n        # Module not installed\n        return $false\n    }\n}\n\nfunction Install-PowerShellModule\n{\n    # Define parameters\n    param(\n        $PowerShellModuleName,\n        $LocalModulesPath\n    )\n\n\t# Check to see if the package provider has been installed\n    if ((Get-NugetPackageProviderNotInstalled) -ne $false)\n    {\n    \t# Display that we need the nuget package provider\n        Write-Host \"Nuget package provider not found, installing ...\"\n        \n        # Install Nuget package provider\n        Install-PackageProvider -Name Nuget -Force\n    }\n\n\t# Save the module in the temporary location\n    Save-Module -Name $PowerShellModuleName -Path $LocalModulesPath -Force\n}\n\nfunction Get-NugetPackageProviderNotInstalled\n{\n\t# See if the nuget package provider has been installed\n    return ($null -eq (Get-PackageProvider -ListAvailable -Name Nuget -ErrorAction SilentlyContinue))\n}\n\nfunction Get-UserExists\n{\n\t# Define parameters\n    param ($Hostname,\n    $Username)\n    \n\t# Execute query\n    return Invoke-SqlQuery \"SELECT * FROM mysql.user WHERE Host = '$Hostname' AND User = '$Username';\"\n}\n\n# Define PowerShell Modules path\n$LocalModules = (New-Item \"$PSScriptRoot\\Modules\" -ItemType Directory -Force).FullName\n$env:PSModulePath = \"$LocalModules$([System.IO.Path]::PathSeparator)$env:PSModulePath\"\n$PowerShellModuleName = \"SimplySql\"\n\n# Set secure protocols\n[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor [Net.SecurityProtocolType]::Tls11 -bor [System.Net.SecurityProtocolType]::Tls12\n\n# Check to see if SimplySql module is installed\nif ((Get-ModuleInstalled -PowerShellModuleName $PowerShellModuleName) -ne $true)\n{\n    # Tell user what we're doing\n    Write-Output \"PowerShell module $PowerShellModuleName is not installed, downloading temporary copy ...\"\n\n    # Install temporary copy\n    Install-PowerShellModule -PowerShellModuleName $PowerShellModuleName -LocalModulesPath $LocalModules\n}\n\n# Display\nWrite-Output \"Importing module $PowerShellModuleName ...\"\n\n# Check to see if it was downloaded\nif ((Test-Path -Path \"$LocalModules\\$PowerShellModuleName\") -eq $true)\n{\n\t# Use specific location\n    $PowerShellModuleName = \"$LocalModules\\$PowerShellModuleName\"\n}\n\n# Import the module\nImport-Module -Name $PowerShellModuleName\n\n# Create credential object for the connection\n$SecurePassword = ConvertTo-SecureString $createLoginPasswordWithAddUserRights -AsPlainText -Force\n$ServerCredential = New-Object System.Management.Automation.PSCredential ($createLoginWithAddUserRights, $SecurePassword)\n\ntry\n{\n\t# Connect to MySQL\n    $connectionString = \"Server=$createMySQLServerName;Port=$createMySQLServerPort;Uid=$createLoginWithAddUserRights;Pwd=$createLoginPasswordWithAddUserRights;\"\n    if ($createUseSSL -eq \"True\")\n    {\n    \t# Append to connection string\n        $connectionString += \"SslMode=Required;\"\n    }\n    else\n    {\n    \t# Disable ssl\n        $connectionString += \"SslMode=none;\"\n    }\n    \n    Open-MySqlConnection -ConnectionString $connectionString\n\n    # See if database exists\n    $userExists = Get-UserExists -Hostname $createUserHostname -Username $createNewUsername\n\n    if ($userExists -eq $null)\n    {\n        # Create database\n        Write-Output \"Creating user $createNewUsername ...\"\n        $executionResults = Invoke-SqlUpdate \"CREATE USER '$createNewUsername'@'$createUserHostname' IDENTIFIED BY '$createNewUserPassword';\"\n\n        # See if it was created\n        $userExists = Get-UserExists -Hostname $createUserHostname -Username $createNewUsername\n            \n        # Check array\n        if ($userExists -ne $null)\n        {\n            # Success\n            Write-Output \"$createNewUsername created successfully!\"\n        }\n        else\n        {\n            # Failed\n            Write-Error \"$createNewUsername was not created!\"\n        }\n    }\n    else\n    {\n    \t# Display message\n        Write-Output \"User $createNewUsername on $createUserHostname already exists.\"\n    }\n}\nfinally\n{\n    Close-SqlConnection\n}\n\n\n"
    },
    "Parameters": [
      {
        "Id": "0fb5e63d-528c-4e7e-841d-6d4bd1ef47a4",
        "Name": "createMySQLServerName",
        "Label": "MySQL Server",
        "HelpText": "Host name of the MySQL server",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "47364cd4-6c31-43f6-9585-cc97aca28d3c",
        "Name": "createMySQLServerPort",
        "Label": "Port",
        "HelpText": "Port number the MySQL server listens on.",
        "DefaultValue": "3306",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "cb9b74a5-f444-4b8c-b353-0eebd990e0a3",
        "Name": "createLoginWithAddUserRights",
        "Label": "Login name",
        "HelpText": "Login name of a user with rights to create user accounts.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "699b3521-06dc-4e66-a20e-adce0fddab38",
        "Name": "createLoginPasswordWithAddUserRights",
        "Label": "Login Password",
        "HelpText": "Password Login name.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "Sensitive"
        }
      },
      {
        "Id": "5b5ec614-a799-407d-870a-d3098794e049",
        "Name": "createNewUsername",
        "Label": "New user name",
        "HelpText": "Name of the new user account to create.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "8fe190a3-b3d5-4d4b-84d2-a4fe5bf2c99f",
        "Name": "createNewUserPassword",
        "Label": "New user password",
        "HelpText": "Password for the new user account.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "Sensitive"
        }
      },
      {
        "Id": "c7fd6115-ec4d-455b-b84b-d6eb19228140",
        "Name": "createUserHostname",
        "Label": "New user host name",
        "HelpText": "Host name that the new user account is allowed to login from.  Enter % to allow the account to connect from anywhere.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "26090b1e-7f56-4f49-990d-5d8022417f13",
        "Name": "createUseSSL",
        "Label": "Use SSL",
        "HelpText": "Check this box to force the use of SSL.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "Checkbox"
        }
      }
    ],
    "LastModifiedBy": "twerthi",
    "$Meta": {
      "ExportedAt": "2020-05-25T21:25:21.950Z",
      "OctopusVersion": "2020.1.18",
      "Type": "ActionTemplate"
    },
    "Category": "mysql"
  }