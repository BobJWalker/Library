{
  "Id": "05d2d9a8-3862-49ff-97d6-5f08935f6fa3",
  "Name": "Kubernetes - Create Service Account and Target",
  "Description": "Create a service account with a role granting full access to everything in the namespace, and create a Kubernetes target with the new account in Octopus",
  "ActionType": "Octopus.KubernetesRunScript",
  "Version": 12,
  "CommunityActionTemplateId": null,
  "Packages": [],
  "Properties": {
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.Script.Syntax": "PowerShell",
    "Octopus.Action.Script.ScriptBody": "if ([string]::IsNullOrWhitespace($CreateK8sTargetNamespace)) {\n\tWrite-Error \"The namespace variable must be defined\"\n    exit 1\n}\n\nif ([string]::IsNullOrWhitespace($CreateK8sTargetRole)) {\n\tWrite-Error \"The role variable must be defined\"\n    exit 1\n}\n\n$target = if ([string]::IsNullOrEmpty($CreateK8sTargetName)) {\"$($CreateK8sTargetNamespace)-k8s\"} else {$CreateK8sTargetName}\n$serviceaccount = \"$($CreateK8sTargetNamespace)-deployer\"\n$rolename = \"$($CreateK8sTargetNamespace)-deployer-role\"\n$binding = \"$($CreateK8sTargetNamespace)-deployer-binding\"\n\n$count = (kubectl get namespaces -o json |\n\tConvertFrom-JSON |\n    Select-Object -ExpandProperty items |\n    ? {$_.metadata.name -eq $CreateK8sTargetNamespace}).Count\n    \nif ($count -eq 0) {\n  Set-Content -Path namespace.yaml -Value @\"\n  apiVersion: v1\n  kind: Namespace\n  metadata:\n     name: $CreateK8sTargetNamespace\n\"@\n\n  kubectl apply -f namespace.yaml\n}\n\nSet-Content -Path serviceaccount.yaml -Value @\"\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: $serviceaccount\n  namespace: $CreateK8sTargetNamespace \n---\nkind: Role\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  namespace: $CreateK8sTargetNamespace \n  name: $rolename\nrules:\n- apiGroups: [\"*\"]\n  resources: [\"*\"]\n  verbs: [\"*\"]\n---\nkind: RoleBinding\napiVersion: rbac.authorization.k8s.io/v1\nmetadata:\n  name: $binding\n  namespace: $CreateK8sTargetNamespace \nsubjects:\n- kind: ServiceAccount\n  name: $serviceaccount\n  apiGroup: \"\"\nroleRef:\n  kind: Role\n  name: $rolename\n  apiGroup: \"\"\n\"@\n\nkubectl apply -f serviceaccount.yaml\n  \n$data = kubectl get secret $(kubectl get serviceaccount $serviceaccount -o jsonpath=\"{.secrets[0].name}\" --namespace=$CreateK8sTargetNamespace) -o jsonpath=\"{.data.token}\"  --namespace=$CreateK8sTargetNamespace \n$token = [System.Text.Encoding]::ASCII.GetString([System.Convert]::FromBase64String($data))\n$url = (kubectl config view -o json | ConvertFrom-Json).clusters[0].cluster.server\n\nNew-OctopusTokenAccount -Name $target -token $token -updateIfExisting\n\nif ([string]::IsNullOrEmpty(\"#{Octopus.Action.Kubernetes.CertificateAuthority}\") -or \"#{Octopus.Action.Kubernetes.AksAdminLogin}\" -ieq \"True\") {\n\tNew-OctopusKubernetesTarget `\n\t\t-name $target `\n\t\t-clusterUrl $url `\n\t\t-octopusRoles $CreateK8sTargetRole `\n\t\t-octopusAccountIdOrName $target `\n\t\t-namespace $CreateK8sTargetNamespace `\n\t\t-updateIfExisting `\n\t\t-skipTlsVerification True `\n\t\t-octopusDefaultWorkerPoolIdOrName \"#{Octopus.WorkerPool.Id}\" `\n        -healthCheckContainerImageFeedIdOrName \"$CreateK8sTargetContainerImageFeed\" `\n    \t-healthCheckContainerImage \"$CreateK8sTargetContainerImage\"\n} else {\n\tNew-OctopusKubernetesTarget `\n\t\t-name $target `\n\t\t-clusterUrl $url `\n\t\t-octopusRoles $CreateK8sTargetRole `\n\t\t-octopusAccountIdOrName $target `\n\t\t-namespace $CreateK8sTargetNamespace `\n\t\t-updateIfExisting `\n        -octopusServerCertificateIdOrName \"#{Octopus.Action.Kubernetes.CertificateAuthority}\" `\n\t\t-octopusDefaultWorkerPoolIdOrName \"#{Octopus.WorkerPool.Id}\" `\n        -healthCheckContainerImageFeedIdOrName \"$CreateK8sTargetContainerImageFeed\" `\n    \t-healthCheckContainerImage \"$CreateK8sTargetContainerImage\"\n}",
    "Octopus.Action.KubernetesContainers.Namespace": ""
  },
  "Parameters": [
    {
      "Id": "66047c5e-8827-4bce-85ef-98466e656d0e",
      "Name": "CreateK8sTargetName",
      "Label": "Target name",
      "HelpText": "The optional name of the target. Defaults to \"<namespace>-k8s\" if no value is defined.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "1505ab59-1b6b-497e-9aa5-888f583c2cb2",
      "Name": "CreateK8sTargetRole",
      "Label": "Target Role",
      "HelpText": "The role to assign to the new Kubernetes target",
      "DefaultValue": "k8s",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "e0dc3fc2-b422-4b27-8353-efee0233cf7f",
      "Name": "CreateK8sTargetNamespace",
      "Label": "Target Namespace",
      "HelpText": "The namespace that the service account is granted access to, as well as the default namespace on the target.",
      "DefaultValue": "#{Octopus.Environment.Name | ToLower}",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "f14880f9-5a57-4469-85d7-5e68e090ed43",
      "Name": "CreateK8sTargetContainerImageFeed",
      "Label": "Container Image Feed",
      "HelpText": "The optional name of the Docker feed where the container image is sourced from.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "8d8d4317-af86-4a2a-9c04-eef1d8624e4a",
      "Name": "CreateK8sTargetContainerImage",
      "Label": "Container image",
      "HelpText": "The optional name of the health check container image.",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "$Meta": {
    "ExportedAt": "2020-08-02T23:50:06.800Z",
    "OctopusVersion": "2020.3.2",
    "Type": "ActionTemplate"
  },
  "LastModifiedBy": "mcasperson",
  "Category": "k8s"
}
