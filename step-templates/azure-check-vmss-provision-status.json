{
    "Id": "e04c5cd8-0982-44b8-9cae-0a4b43676adc",
    "Name": "Check VMSS Provision Status",
    "Description": "Use this step when leveraging Azure Virtual Machines Scale Sets (VMSS) with Octopus Deploy.\n\n**Please run this on a worker or the Octopus Server**\n\nThis step will:\n- Pause a runbook run or deployment until the VMSS has been provisioned\n- Pause a runbook run or deployment until all the VMs in a VMss have been provisioned\n- Reconcile the list of VMs in the VMSS with the list of VMs in Octopus Deploy.  Any VMs in Octopus Deploy (based on role) not in the VMSS will be removed.\n\nThis step will set the following output variables:\n- `VMSSHasServers`: Indicates the VMSS has servers.  \n- `VMSSDeploymentTargetIds`: A comma-separated list of deployment target Ids you can use in later steps.\n- `VMSSDeploymentTargetNames`: A comma-separated list of deployment target names you can use in later steps.\n\n**Please Note**: Setting the parameter `Exclude Pre-Existing Servers from Output` to `Yes` will remove any servers prior to a scale event from being returned in the output variables. \n\nThis step makes the following assumptions:\n- The name of the machine registration in Octopus is the same as the VM in the VMSS\n- You have the Azure Az PowerShell modules pre-installed on a worker or your Octopus Server.\n- This step is running in the same space/environment/tenant (optional) as the deployment targets.",
    "ActionType": "Octopus.AzurePowerShell",
    "Version": 1,
    "CommunityActionTemplateId": null,
    "Packages": [],
    "Properties": {
        "OctopusUseBundledTooling": "False",
        "Octopus.Action.Script.ScriptSource": "Inline",
        "Octopus.Action.Script.Syntax": "PowerShell",
        "Octopus.Action.Azure.AccountId": "#{VMSS.Azure.Account}",
        "Octopus.Action.Script.ScriptBody": "$vmssScaleSetName = $OctopusParameters[\"VMSS.ScaleSet.Name\"]\n$vmssScaleSetResourceGroup = $OctopusParameters[\"VMSS.ResourceGroup.Name\"]\n$roleToSearchFor = $OctopusParameters[\"VMSS.DeploymentTarget.Roles\"]\n$apiKey = $OctopusParameters[\"VMSS.Octopus.ApiKey\"]\n$octopusUrl = $OctopusParameters[\"VMSS.Octopus.Url\"]\n$timeoutInMinutes = $OctopusParameters[\"VMSS.Timeout.Value\"]\n$timeoutErrorHandle = $OctopusParameters[\"VMSS.Timeout.ErrorHandle\"]\n$duplicateRunDetectionInMinutes = $OctopusParameters[\"VMSS.Duplicate.TimeInMinutes\"]\n$duplicateRunHandle = $OctopusParameters[\"VMSS.Duplicate.Handle\"]\n$excludeOldServers = $OctopusParameters[\"VMSS.OldServers.ExcludeFromOutput\"]\n\n$octopusSpaceId = $OctopusParameters[\"Octopus.Space.Id\"]\n$octopusEnvironmentId = $OctopusParameters[\"Octopus.Environment.Id\"]\n$octopusTenantId = $OctopusParameters[\"Octopus.Deployment.Tenant.Id\"]\n$octopusDeploymentId = $OctopusParameters[\"Octopus.Deployment.Id\"]\n$octopusTriggerId = $OctopusParameters[\"Octopus.Deployment.Trigger.Id\"]\n$octopusTaskId = $OctopusParameters[\"Octopus.Task.Id\"]\n$octopusRunbookRunId = $OctopusParameters[\"Octopus.RunbookRun.Id\"]\n\nfunction Invoke-OctopusApi\n{\n    param\n    (\n        $octopusUrl,\n        $endPoint,\n        $spaceId,\n        $apiKey,\n        $method,\n        $item  \n    )\n\n    if ([string]::IsNullOrWhiteSpace($SpaceId))\n    {\n        $url = \"$OctopusUrl/api/$EndPoint\"\n    }\n    else\n    {\n        $url = \"$OctopusUrl/api/$spaceId/$EndPoint\"    \n    }  \n\n    try\n    {        \n        if ($null -ne $item)\n        {\n            $body = $item | ConvertTo-Json -Depth 10\n            Write-Verbose $body\n\n            Write-Host \"Invoking $method $url\"\n            return Invoke-RestMethod -Method $method -Uri $url -Headers @{\"X-Octopus-ApiKey\" = \"$ApiKey\" } -Body $body -ContentType 'application/json; charset=utf-8' \n        }\n\n\t\tWrite-Verbose \"No data to post or put, calling bog standard invoke-restmethod for $url\"\n        $result = Invoke-RestMethod -Method $method -Uri $url -Headers @{\"X-Octopus-ApiKey\" = \"$ApiKey\" } -ContentType 'application/json; charset=utf-8'\n\n        return $result\n\n               \n    }\n    catch\n    {\n        if ($null -ne $_.Exception.Response)\n        {\n            if ($_.Exception.Response.StatusCode -eq 401)\n            {\n                Write-Error \"Unauthorized error returned from $url, please verify API key and try again\"\n            }\n            elseif ($_.Exception.Response.statusCode -eq 403)\n            {\n                Write-Error \"Forbidden error returned from $url, please verify API key and try again\"\n            }\n            else\n            {                \n                Write-Verbose -Message \"Error calling $url $($_.Exception.Message) StatusCode: $($_.Exception.Response.StatusCode )\"\n            }            \n        }\n        else\n        {\n            Write-Verbose $_.Exception\n        }\n    }\n\n    Throw \"There was an error calling the Octopus API.\"\n}\n\nWrite-Host \"ScaleSet Name: $vmssScaleSetName\"\nWrite-Host \"Resource Group Name: $vmssScaleSetResourceGroup\"\nWrite-Host \"Deployment Target Role to Search For: $roleToSearchFor\"\nWrite-Host \"Octopus Url: $octopusUrl\"\nWrite-Host \"Timeout In Minutes: $timeoutInMinutes\"\nWrite-Host \"Timeout Error Handle: $timeoutErrorHandle\"\nWrite-Host \"Duplicate Run Detection in Minutes: $duplicateRunDetectionInMinutes\"\nWrite-Host \"Duplicate Run Handle: $duplicateRunHandle\"\nWrite-host \"Exclude Old Servers: $excludeOldServers\"\n\nWrite-Host \"Space Id: $octopusSpaceId\"\nWrite-Host \"Environment Id: $octopusEnvironmentId\"\nWrite-Host \"Tenant Id: $octopusTenantId\"\nWrite-Host \"Deployment Id: $octopusDeploymentId\"\nWrite-Host \"Trigger Id: $octopusTriggerId\"\nWrite-Host \"Task Id: $octopusTaskId\"\nWrite-Host \"Runbook Run Id: $octopusRunbookRunId\"\n\nif ([string]::IsNullOrWhiteSpace($vmssScaleSetName)) { Write-Error \"Scale Set Name is required.\" }\nif ([string]::IsNullOrWhiteSpace($vmssScaleSetResourceGroup)) { Write-Error \"Resource Group Name is required.\" }\nif ([string]::IsNullOrWhiteSpace($roleToSearchFor)) { Write-Error \"Scale Set Name is required.\" }\nif ([string]::IsNullOrWhiteSpace($octopusUrl)) { Write-Error \"Octopus Url is required.\" }\nif ([string]::IsNullOrWhiteSpace($apiKey)) { Write-Error \"Octopus Api Key is required.\" }\nif ([string]::IsNullOrWhiteSpace($timeoutInMinutes)) { Write-Error \"Timeout in minutes is required.\" }\nif ([string]::IsNullOrWhiteSpace($timeoutErrorHandle)) { Write-Error \"Timeout error handle is required.\" }\nif ([string]::IsNullOrWhiteSpace($duplicateRunDetectionInMinutes)) { Write-Error \"Duplicate run detection in minutes is required.\" }\nif ([string]::IsNullOrWhiteSpace($duplicateRunHandle)) { Write-Error \"Duplicate run handle is required.\" }\nif ([string]::IsNullOrWhiteSpace($excludeOldServers)) { Write-Error \"Exclude old servers is required.\" }\n\nif ([string]::IsNullOrWhiteSpace($octopusRunbookRunId))\n{\n    $queuedListRaw = Invoke-OctopusApi -octopusUrl $octopusUrl -endPoint \"events?regardingAny=$($OctopusDeploymentId)&spaces=$($octopusSpaceId)&documentTypes=Deployments&eventCategories=DeploymentQueued\" -spaceId $null -apiKey $apiKey -method \"GET\"\n}\nelse\n{\n    $queuedListRaw = Invoke-OctopusApi -octopusUrl $octopusUrl -endPoint \"events?regardingAny=$($octopusRunbookRunId)&spaces=$($octopusSpaceId)&documentTypes=RunbookRuns&eventCategories=RunbookRunQueued\" -spaceId $null -apiKey $apiKey -method \"GET\"\n}\n\n$queuedArray = @($queuedListRaw.Items)\n\n$currentDeploymentQueued = [DateTime]$queuedArray[0].Occurred\n\nWrite-Host \"The current deployment was queued at: $octopusQueueTime\"\n\n$duplicateRun = $false\nif ([string]::IsNullOrWhiteSpace($octopusTriggerId) -eq $false)\n{\n\tWrite-Highlight \"This run was triggered by a scheduled or deployment target trigger.\"\n    \n    Write-Host \"The number of items in the queued array is: $($queuedArray.Length)\"\n    if ($queuedArray.Length -gt 1)\n    {\n    \tWrite-Host \"This task has been run before\"  \n        if ([string]::IsNullOrWhiteSpace($octopusRunbookRunId))\n        {      \n            $finishedEventListRaw = Invoke-OctopusApi -octopusUrl $octopusUrl -endPoint \"events?regardingAny=$($OctopusDeploymentId)&spaces=$($octopusSpaceId)&documentTypes=Deployments&eventCategories=DeploymentSucceeded,DeploymentFailed&skip=0&take=1\" -spaceId $null -apiKey $apiKey -method \"GET\"\n        }\n        else\n        {\n            $finishedEventListRaw = Invoke-OctopusApi -octopusUrl $octopusUrl -endPoint \"events?regardingAny=$($OctopusDeploymentId)&spaces=$($octopusSpaceId)&documentTypes=RunbookRuns&eventCategories=RunbookRunSucceeded,RunbookRunFailed&skip=0&take=1\" -spaceId $null -apiKey $apiKey -method \"GET\"    \n        }\n\n        $finishedEventArray = @($finishedEventListRaw.Items)\n              \n        $previousDeploymentFinished = [DateTime]$finishedEventArray[0].Occurred\n        \n        Write-Host \"The current deployment was queued $currentDeploymentQueued while the previous deployment was finished $previousDeploymentFinished\"\n        \n        $queuedCompletedDifference = $currentDeploymentQueued - $previousDeploymentFinished\n        \n        Write-Host \"The difference in minutes is $($queuedCompletedDifference.TotalMinutes)\"\n        if ($queuedCompletedDifference.TotalMinutes -le $duplicateRunDetectionInMinutes)\n        {\n        \tWrite-Highlight \"The previous deployment finished in the last $($queuedCompletedDifference.TotalMinutes) minutes before this was trigger, that is extremely fast\"\n            \n            if ($duplicateRunHandle.ToLower().Trim() -eq \"cancel\")\n            {\n            \tWrite-Highlight \"The duplicate run handle is set to cancel, cancelling current deployment.\"\n                Invoke-OctopusApi -octopusUrl $octopusUrl -apiKey $apiKey -spaceId $OctopusSpaceId -method \"POST\" -endPoint \"tasks/$($octopusTaskId)/cancel\"    \n            }\n            else\n            {\n            \tWrite-Highlight \"The duplicate run handle is set to proceed.  Setting the ouput variable 'DuplicateRun' to $true\"\n            }\n        }\n        else\n        {\n        \tWrite-Highlight \"The last deployment finished and this one was queued within $($queuedCompletedDifference.TotalMinutes) minutes which is outside the window of $duplicateRunDetectionInMinutes minutes.  Not a duplicate.\"\n        }\n    }\t    \n    else\n    {\n    \tWrite-Host \"This is the first time this release has been deployed to this environment.\"\n    }\n}\n\n$vmssState = \"Provisioning\"\n$startTime = Get-Date\n\ndo\n{\n\ttry\n    {\n\t\t$vmssInfo = Get-AzVmss -ResourceGroupName $vmssScaleSetResourceGroup -VMScaleSetName $vmssScaleSetName\n    }\n    catch\n    {\n    \tWrite-Highlight \"Unable to access the scale set $vmssScaleSetName.  Exiting step.\"\n        Write-Host $_.Exception\n        exit 0\n    }\n\n\tWrite-Verbose \"VMSSInfo: \"\n\tWrite-Verbose ($vmssInfo | ConvertTo-JSON -Depth 10)\n\n\t$vmssInstanceCount = $vmssInfo.Sku.Capacity\n\t$vmssState = $vmssInfo.ProvisioningState\n\n\tif($vmssState.ToLower().Trim() -ne \"provisioning\")\n    {    \n\t\tWrite-Highlight \"The VMSS $vmssScaleSetName capacity is current set to $vmssInstanceCount with a provisioning state of $vmssState\"\n    }\n    else\n    {\n    \tWrite-Host \"The VMSS is still provisioning, sleeping for 10 seconds then checking again.\"\n   \t    Start-Sleep -Seconds 10\n    }\n    \n    $currentTime = Get-Date\n    $dateDifference = $currentTime - $startTime\n    \n    if ($dateDifference.TotalMinutes -ge $timeoutInMinutes)\n    {\n    \tWrite-Highlight \"We have been waiting $($dateDifference.TotalMinutes) for the VMSS to finish provisioning.  Timeout reached, exiting.\"\n        exit 1\n    }   \n    \n} While ($vmssState.ToLower().Trim() -eq \"provisioning\")\n\n$vmssVmsAreProvisioning = $false\n$vmssProvisionedVms\n\n$startTime = Get-Date\n$numberOfWaits = 0\n\nWrite-Highlight \"Checking the state of all VMs in the scale set.\"\n\ndo\n{\n\t$numberOfWaits += 1\n\t$vmssVmList = Get-AzVmssVM -ResourceGroupName $vmssScaleSetResourceGroup -VMScaleSetName $vmssScaleSetName\n    \n    if ($numberOfWaits -eq 1)\n    {\n    \tWrite-Host ($vmssVmList | ConvertTo-Json -Depth 10)\n    }\n    \n    $vmssVmsAreProvisioning = $false\n    foreach ($vmInfo in $vmssVmList)\n    {\n    \tif ($vmInfo.ProvisioningState.ToLower().Trim() -eq \"creating\")\n        {\n        \t$vmssVmsAreProvisioning = $true\n            break\n        }\n    }\n    \n    if ($vmssVmsAreProvisioning -eq $true)\n    {        \n        $currentTime = Get-Date\n        $dateDifference = $currentTime - $startTime\n\n        if ($dateDifference.TotalMinutes -ge $timeoutInMinutes)\n        {\n            $vmssVmsAreProvisioning = $false\n            if ($timeoutErrorHandle.ToLower().Trim() -eq \"error\")\n            {\n            \tWrite-Highlight \"The VMs in the scale have been provisioning for over $timeoutInMinutes.  Error handle is set to error out, exiting with an exit code of 1.\"\n                exit 1\n            }\n            \n            Write-Highlight \"The VMs in the scale have been provisioning for over $timeoutInMinutes.  Going to move on and continue with the deployment.\"\n        } \n        else\n        {\n        \tif ($numberofWaits -ge 10)\n            {\n            \tWrite-Highlight \"The VMs are still currently provisioning, waiting...\"\n                $numberOfWaits = 0\n            }\n            else\n            {            \n\t        \tWrite-Host \"The VMs are still currently provisioning, sleeping for 10 seconds then checking again.\"\n            }\n\t    \tStart-Sleep -Seconds 10\n        }\n    }\n    else\n    {\n    \tWrite-Highlight \"All the VMs in the VM Scale Set have been provisioned, reconciling them with the list in Octopus.\"\n    }         \n} while ($vmssVmsAreProvisioning -eq $true)\n\n$vmssVmList = Get-AzVmssVM -ResourceGroupName $vmssScaleSetResourceGroup -VMScaleSetName $vmssScaleSetName\n$vmListToReconcile = @()\n\nforeach ($vmInfo in $vmssVmList)\n{\n\tif ($vmInfo.ProvisioningState.ToLower().Trim() -ne \"failed\")\n    {\n    \t$vmListToReconcile += $vmInfo.OsProfile.ComputerName\n    }\n}\n\n$octopusDeployTargets = Invoke-OctopusApi -octopusUrl $octopusUrl -endPoint \"machines?environmentIds=$($octopusEnvironmentId)&roles=$($roleToSearchFor)&skip=0&take=1000\" -spaceId $octopusSpaceId -apiKey $apiKey -method \"GET\"\n$octopusDeployTargetIds = @()\n$octopusDeployTargetNames = @()\n$roleList = $roleToSearchFor.Split(\",\")\nforeach ($deploymentTarget in $octopusDeployTargets.Items)\n{\n\t$matchingRole = $true\n    foreach ($role in $roleList)\n    {\n    \tif ($deploymentTarget.Roles -notContains ($role.Trim()))\n        {\n        \tWrite-Host \"The target $($deploymentTarget.Name) does not contain the role $role, it is not part of the scale set, moving on.\"\n            $matchingRole = $false\n            break\n        }\n    }\n    \n    if ($matchingRole -eq $false)\n    {\n    \tcontinue\n    }\n    \n    if ([string]::IsNullOrWhiteSpace($octopusTenantId) -eq $false -and $deploymentTarget.TenantIds -notcontains $octopusTenantId)\n    {\n    \tWrite-Host \"The target $($deploymentTarget.Name) is not assigned to $octopusTenantId, and is not part of the scale set, moving on.\"\n        continue\n    }\n    \n    if ($vmListToReconcile -notcontains $deploymentTarget.Name)\n    {\n    \tWrite-Highlight \"The deployment target $($deploymentTarget.Name) is not in the list of VMs assigned to the scale set, deleting it.\"\n        Invoke-OctopusApi -octopusUrl $octopusUrl -endPoint \"machines/$($deploymentTarget.Id)\" -spaceId $octopusSpaceId -apiKey $apiKey -method \"DELETE\"\n    }\n    else\n    {\n    \tWrite-Highlight \"The deployment target $($deploymentTarget.Name) is in the list of VMS assigned to the scale set, leaving it alone.\"\n        \n        $addToOutputArray = $true\n        if ($excludeOldServers.ToLower().Trim() -eq \"yes\")\n        {\n        \tWrite-Host \"Pulling back the creation event for $($deploymentTarget.Name)\"\n        \t$creationTasks = Invoke-OctopusApi -octopusUrl $octopusUrl -endPoint \"events?regarding=$($deploymentTarget.Id)&spaces=$($octopusSpaceId)&includeSystem=true&eventCategories=Created\" -spaceId $null -apiKey $apiKey -method \"GET\"\n            \n            $creationDate = @($creationTasks.Items)[0].Occurred\n            Write-Host \"The deployment target $($deploymentTarget.Name) was created on $creationDate\"\n            $differenceInCreationTime = [DateTime]$currentDeploymentQueued - [DateTime]$creationDate\n            \n            Write-Host \"The difference in minutes between creation date and current task queued time is $($differenceInCreationTime.TotalMinutes) minutes\" \n            if ($differenceInCreationTime.TotalMinutes -gt 3)\n            {\n            \tWrite-Host \"The deployment target $($deploymentTarget.Name) existed for more than 3 minutes before this was ran and the excludeOldServers was set to yes, removing this from the output\"\n            \t$addToOutputArray = $false\n            }\n        }\n        \n        if ($addToOutputArray -eq $true)\n        {\n\t        $octopusDeployTargetIds += $deploymentTarget.Id\n    \t    $octopusDeployTargetNames += $deploymentTarget.Name\n        }\n    }\n}\n\nWrite-Highlight \"The Azure VM Scale Set $vmssScaleSetName and Octopus Deploy target list have been successfully reconciled.\"\n\nWrite-Highlight \"Setting the output variable 'VMSSDeploymentTargetIds' to $($octopusDeployTargetIds -join \",\").  Please note, any old servers were removed from this list if exclude old servers is set to yes.\"\n\nWrite-Highlight \"Setting the output variable 'VMSSDeploymentTargetNames' to $($octopusDeployTargetNames -join \",\"). Please note, any old servers were removed from this list if exclude old servers is set to yes\"\n\n$vmssHasServers = $octopusDeployTargetIds.Count -gt 0\nif ($duplicateRun -eq $true)\n{\n\tWrite-Highlight \"Duplicate run detected, therefore there are no new servers to deploy to.\"\n    $vmssHasServers = $false\n}\nelseif ($vmssHasServers -eq $false)\n{\n\tWrite-Highlight \"Exclude old servers was set to '$excludeOldServers' and no servers were found.  This likely means this was a scale in event or all the servers existed prior to this run.\"\n}\n\nWrite-Highlight \"Setting the output variable 'VMSSHasServers' to $vmssHasServers.\"\nSet-OctopusVariable -Name \"VMSSHasServers\" -Value $vmssHasServers\n\nWrite-Highlight \"Setting the output variable 'VMSSDeploymentTargetIds' to $($octopusDeployTargetIds -join \",\").\"\nSet-OctopusVariable -Name \"VMSSDeploymentTargetIds\" -Value ($octopusDeployTargetIds -join \",\")\n\nWrite-Highlight \"Setting the output variable 'VMSSDeploymentTargetNames' to $($octopusDeployTargetNames -join \",\").\"\nSet-OctopusVariable -Name \"VMSSDeploymentTargetNames\" -Value ($octopusDeployTargetNames -join \",\")\n"
    },
    "Parameters": [
      {
        "Id": "9f9bc9fb-fa96-41ab-aa06-ad0dd68ff038",
        "Name": "VMSS.ScaleSet.Name",
        "Label": "VMSS Name",
        "HelpText": "**Required**\n\nThe name of the Azure Virtual Machine Scale Set",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "32939873-a965-46ae-915f-f94d93f94c0b",
        "Name": "VMSS.ResourceGroup.Name",
        "Label": "VMSS Resource Group Name",
        "HelpText": "**Required**\n\nThe name of the resource group where the VMSS is located.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "571df393-6353-4f12-96cd-c92f3a5e1452",
        "Name": "VMSS.Azure.Account",
        "Label": "Azure Account",
        "HelpText": "**Required**\n\nThe Azure Account to use when querying the VMSS.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "AzureAccount"
        }
      },
      {
        "Id": "b03d1bf3-76f8-4a3c-917a-60d5e19a15f4",
        "Name": "VMSS.DeploymentTarget.Roles",
        "Label": "Deployment Target Roles",
        "HelpText": "**Required**\n\nA comma-separated list of deployment target roles to filter your deployment targets by.  These roles are how this step will determine which machines to reconcile.\n\nIf you supply multiple roles, for example `todo-web-server,todo-virtual-machine-scale-set` the deployment targets have to be assigned `todo-web-server` AND `todo-virtual-machine-scaleset` roles for the target to be considered.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "757ca61b-d15b-4dbb-911a-b3f4dc0258b5",
        "Name": "VMSS.Octopus.Url",
        "Label": "Octopus URL",
        "HelpText": "**Required**\n\nThe URL of the Octopus Server to query against.  Example: `https://samples.octopus.app`.",
        "DefaultValue": "#{Octopus.Web.ServerUri}",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "7b070182-e79b-48a0-966a-39d332802b60",
        "Name": "VMSS.Octopus.ApiKey",
        "Label": "Octopus API Key",
        "HelpText": "**Required**\n\nAPI Key of a service account that has permissions to:\n- Query deployment targets, environments, and tenants. \n- Query events (audit history) \n- Delete deployment targets\n\nAssigning the service account to a team with `Project Viewer` and `Environment Manager` roles will work.",
        "DefaultValue": "",
        "DisplaySettings": {
          "Octopus.ControlType": "Sensitive"
        }
      },
      {
        "Id": "6e0f8635-70ba-4b8a-b5b4-909dba3f9fd8",
        "Name": "VMSS.Timeout.Value",
        "Label": "Timeout (In Minutes)",
        "HelpText": "**Required**\n\nHow long this step will wait (in minutes) for the VMSS and VMs in the VMSS to finish being created.",
        "DefaultValue": "30",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "0392f153-73b0-44d4-9181-4f366c9012f7",
        "Name": "VMSS.Timeout.ErrorHandle",
        "Label": "Timeout Error",
        "HelpText": "**Required**\n\nWhat will happen when a timeout occurs.\n\n- `Proceed`: The script will reconcile the VMs it can and then finish.  No error thrown.  \n- `Error`: Will throw an error and it will stop the deployment from proceeding.\n\nThe default is `Proceed`",
        "DefaultValue": "Proceed",
        "DisplaySettings": {
          "Octopus.ControlType": "Select",
          "Octopus.SelectOptions": "Proceed|Proceed\nError|Error"
        }
      },
      {
        "Id": "80ef4fb9-c773-4d0a-82af-efdfb302e58f",
        "Name": "VMSS.Duplicate.TimeInMinutes",
        "Label": "Duplicate Run Time Allowance (in Minutes)",
        "HelpText": "**Required**\n\nThis step is designed to wait for VMSS to finish scaling out.  However, Octopus isn't aware of VMSS and may attempt to run the same deployment multiple times as new targets are \"discovered.\"\n\nTypically, when this happens, a deployment is queued within a few minutes of the previous one finishing.  When that happens this step will treat that as a duplicate run.  \n\nThis setting indicates the number of minutes that must pass before a duplicate run is found.  The default is `3` minutes.",
        "DefaultValue": "3",
        "DisplaySettings": {
          "Octopus.ControlType": "SingleLineText"
        }
      },
      {
        "Id": "0eb3bed8-9259-440e-bff0-cb86af7da52e",
        "Name": "VMSS.Duplicate.Handle",
        "Label": "Duplicate Run Adjustment",
        "HelpText": "**Required**\n\nWhat the step will do when a duplicate run is found.  The two options are:\n\n- `Cancel`: cancel the current runbook run or deployment.\n- `Proceed`: continue on with the current runbook run or deployment.\n\nThe default is `Proceed`.",
        "DefaultValue": "Proceed",
        "DisplaySettings": {
          "Octopus.ControlType": "Select",
          "Octopus.SelectOptions": "Cancel|Cancel\nProceed|Proceed"
        }
      },
      {
        "Id": "adaf6a8c-453f-4b69-9ba6-f6a54b4f5bb9",
        "Name": "VMSS.OldServers.ExcludeFromOutput",
        "Label": "Exclude Pre-Existing Servers from Output",
        "HelpText": "**Required**\n\nOld servers are any servers that existed prior to scaling out the VMSS.  \n\nIf this step is run in a deployment target trigger it will pull back all the machines in a scale set and return them in an output variable.  Depending on how you use that list, this could result in redeployment.\n\nYou can exclude pre-existing servers by setting this value to `Yes`.  The default is `No`.",
        "DefaultValue": "No",
        "DisplaySettings": {
          "Octopus.ControlType": "Select",
          "Octopus.SelectOptions": "No|No\nYes|Yes"
        }
      }
    ],
    "$Meta": {
      "ExportedAt": "2021-07-20T19:15:02.718Z",
      "OctopusVersion": "2021.2.6259",
      "Type": "ActionTemplate"
    },
    "LastModifiedBy": "BobJWalker",
    "Category": "azure"
  }