{
  "Id": "9895dcb3-4409-4956-81eb-0150347a9ea7",
  "Name": "Lookup Octopus Space ID",
  "Description": "This step queries an Octopus server to return the ID of a named space.",
  "ActionType": "Octopus.Script",
  "Version": 1,
  "CommunityActionTemplateId": null,
  "Packages": [],
  "Properties": {
    "Octopus.Action.RunOnServer": "true",
    "Octopus.Action.Script.ScriptBody": "# This script exists for those scenarios where the tenant space is created as part of the same process that\n# attempts to populate the space. The tenant space ID variable, saved when the space is created, won't be refreshed\n# in the middle of the deployment, so we query it directly.\n\nimport argparse\nimport json\nimport urllib.request\nimport urllib.parse\nimport os\nimport sys\nimport time\n\n# If this script is not being run as part of an Octopus step, return variables from environment variables.\n# Periods are replaced with underscores, and the variable name is converted to uppercase\nif \"get_octopusvariable\" not in globals():\n    def get_octopusvariable(variable):\n        return os.environ[re.sub('\\\\.', '_', variable.upper())]\n\n# If this script is not being run as part of an Octopus step, just print any set variable to std out.\nif \"set_octopusvariable\" not in globals():\n    def set_octopusvariable(name, variable):\n        print(variable)\n\n\ndef get_octopusvariable_quiet(variable):\n    \"\"\"\n    Gets an octopus variable, or an empty string if it does not exist.\n    :param variable: The variable name\n    :return: The variable value, or an empty string if the variable does not exist\n    \"\"\"\n    try:\n        return get_octopusvariable(variable)\n    except:\n        return ''\n\n\ndef init_argparse():\n    parser = argparse.ArgumentParser(\n        usage='%(prog)s [OPTION] [FILE]...',\n        description='Lookup a space ID from the name'\n    )\n    parser.add_argument('--server-url',\n                        action='store',\n                        default=get_octopusvariable_quiet(\n                            'SpaceLookup.ThisInstance.Server.Url') or get_octopusvariable_quiet(\n                            'ThisInstance.Server.Url'),\n                        help='Sets the Octopus server URL.')\n    parser.add_argument('--api-key',\n                        action='store',\n                        default=get_octopusvariable_quiet(\n                            'SpaceLookup.ThisInstance.Api.Key') or get_octopusvariable_quiet('ThisInstance.Api.Key'),\n                        help='Sets the Octopus API key.')\n    parser.add_argument('--space-name',\n                        action='store',\n                        default=get_octopusvariable_quiet('SpaceLookup.Lookup.Space.Name') or get_octopusvariable_quiet(\n                            'Lookup.Space.Name') or get_octopusvariable_quiet('Octopus.Deployment.Tenant.Name'),\n                        help='The name of the space to lookup.')\n\n\nparser, _ = init_argparse()\n\nurl = parser.server_url + '/Spaces?partialName=' + urllib.parse.quote(parser.space_name) + \"&take=1000\"\nheaders = {\n    'X-Octopus-ApiKey': parser.api_key,\n    'Accept': 'application/json'\n}\nrequest = urllib.request.Request(url, headers=headers)\n\n# Retry the request for up to a minute.\nresponse = None\nfor x in range(12):\n    response = urllib.request.urlopen(request)\n    if response.getcode() == 200:\n        break\n    time.sleep(5)\n\nif not response or not response.getcode() == 200:\n    print('The API query failed')\n    sys.exit(1)\n\ndata = json.loads(response.read().decode(\"utf-8\"))\n\nspace = [x for x in data['Items'] if x['Name'] == parser.space_name]\n\nif len(space) != 0:\n    print('Matched tenant name to space')\n    set_octopusvariable(\"SpaceID\", space[0]['Id'])\nelse:\n    print('Failed to match tenant name to space')\n    sys.exit(1)\n",
    "Octopus.Action.Script.ScriptSource": "Inline",
    "Octopus.Action.Script.Syntax": "Python"
  },
  "Parameters": [
    {
      "Id": "69b98409-b4ba-401f-8986-042b6d58584f",
      "Name": "SpaceLookup.ThisInstance.Server.Url",
      "Label": "Server URL",
      "HelpText": "The URL of the Octopus Server hosting the space to resolved.",
      "DefaultValue": "#{Octopus.Web.ServerUri}",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    },
    {
      "Id": "9089cd55-75d6-4e91-a390-d7a3359e3c59",
      "Name": "SpaceLookup.ThisInstance.Api.Key",
      "Label": "Server API Key",
      "HelpText": "The Octopus API Key",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "Sensitive"
      }
    },
    {
      "Id": "4f5d46a5-ea76-478f-a5fa-0bacad6afa5b",
      "Name": "SpaceLookup.Lookup.Space.Name",
      "Label": "Space Name",
      "HelpText": "The name of the space return the ID of",
      "DefaultValue": "",
      "DisplaySettings": {
        "Octopus.ControlType": "SingleLineText"
      }
    }
  ],
  "StepPackageId": "Octopus.Script",
  "$Meta": {
    "ExportedAt": "2023-09-08T01:15:03.480Z",
    "OctopusVersion": "2023.3.12852",
    "Type": "ActionTemplate"
  },
  "LastModifiedBy": "mcasperson",
  "Category": "octopus"
}
